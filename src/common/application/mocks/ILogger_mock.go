// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ILogger is an autogenerated mock type for the ILogger type
type ILogger struct {
	mock.Mock
}

type ILogger_Expecter struct {
	mock *mock.Mock
}

func (_m *ILogger) EXPECT() *ILogger_Expecter {
	return &ILogger_Expecter{mock: &_m.Mock}
}

// LogDebug provides a mock function with given fields: message
func (_m *ILogger) Debug(message string) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ILogger_LogDebug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type ILogger_LogDebug_Call struct {
	*mock.Call
}

// LogDebug is a helper method to define mock.On call
//   - message string
func (_e *ILogger_Expecter) LogDebug(message interface{}) *ILogger_LogDebug_Call {
	return &ILogger_LogDebug_Call{Call: _e.mock.On("Debug", message)}
}

func (_c *ILogger_LogDebug_Call) Run(run func(message string)) *ILogger_LogDebug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ILogger_LogDebug_Call) Return(_a0 error) *ILogger_LogDebug_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILogger_LogDebug_Call) RunAndReturn(run func(string) error) *ILogger_LogDebug_Call {
	_c.Call.Return(run)
	return _c
}

// LogError provides a mock function with given fields: err, message
func (_m *ILogger) Error(err error, message string) error {
	ret := _m.Called(err, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(error, string) error); ok {
		r0 = rf(err, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ILogger_LogError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type ILogger_LogError_Call struct {
	*mock.Call
}

// LogError is a helper method to define mock.On call
//   - err error
//   - message string
func (_e *ILogger_Expecter) LogError(err interface{}, message interface{}) *ILogger_LogError_Call {
	return &ILogger_LogError_Call{Call: _e.mock.On("Error", err, message)}
}

func (_c *ILogger_LogError_Call) Run(run func(err error, message string)) *ILogger_LogError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error), args[1].(string))
	})
	return _c
}

func (_c *ILogger_LogError_Call) Return(_a0 error) *ILogger_LogError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILogger_LogError_Call) RunAndReturn(run func(error, string) error) *ILogger_LogError_Call {
	_c.Call.Return(run)
	return _c
}

// LogInformation provides a mock function with given fields: message
func (_m *ILogger) Info(message string) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ILogger_LogInformation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type ILogger_LogInformation_Call struct {
	*mock.Call
}

// LogInformation is a helper method to define mock.On call
//   - message string
func (_e *ILogger_Expecter) LogInformation(message interface{}) *ILogger_LogInformation_Call {
	return &ILogger_LogInformation_Call{Call: _e.mock.On("Info", message)}
}

func (_c *ILogger_LogInformation_Call) Run(run func(message string)) *ILogger_LogInformation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ILogger_LogInformation_Call) Return(_a0 error) *ILogger_LogInformation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILogger_LogInformation_Call) RunAndReturn(run func(string) error) *ILogger_LogInformation_Call {
	_c.Call.Return(run)
	return _c
}

// NewILogger creates a new instance of ILogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILogger {
	mock := &ILogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
