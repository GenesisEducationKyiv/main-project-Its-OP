// Code generated by mockery v2.30.1. DO NOT EDIT.

package application

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockICoinClient is an autogenerated mock type for the ICoinClient type
type MockICoinClient struct {
	mock.Mock
}

type MockICoinClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockICoinClient) EXPECT() *MockICoinClient_Expecter {
	return &MockICoinClient_Expecter{mock: &_m.Mock}
}

// GetRate provides a mock function with given fields: currency, coin
func (_m *MockICoinClient) GetRate(currency string, coin string) (float64, time.Time, error) {
	ret := _m.Called(currency, coin)

	var r0 float64
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (float64, time.Time, error)); ok {
		return rf(currency, coin)
	}
	if rf, ok := ret.Get(0).(func(string, string) float64); ok {
		r0 = rf(currency, coin)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string, string) time.Time); ok {
		r1 = rf(currency, coin)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(currency, coin)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockICoinClient_GetRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRate'
type MockICoinClient_GetRate_Call struct {
	*mock.Call
}

// GetRate is a helper method to define mock.On call
//   - currency string
//   - coin string
func (_e *MockICoinClient_Expecter) GetRate(currency interface{}, coin interface{}) *MockICoinClient_GetRate_Call {
	return &MockICoinClient_GetRate_Call{Call: _e.mock.On("GetRate", currency, coin)}
}

func (_c *MockICoinClient_GetRate_Call) Run(run func(currency string, coin string)) *MockICoinClient_GetRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockICoinClient_GetRate_Call) Return(_a0 float64, _a1 time.Time, _a2 error) *MockICoinClient_GetRate_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockICoinClient_GetRate_Call) RunAndReturn(run func(string, string) (float64, time.Time, error)) *MockICoinClient_GetRate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockICoinClient creates a new instance of MockICoinClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockICoinClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockICoinClient {
	mock := &MockICoinClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
